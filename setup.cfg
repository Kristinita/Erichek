# Based on https://github.com/pypa/sampleproject
# setup.cfg configuration instead of setup.py
# https://setuptools.readthedocs.io/en/latest/setuptools.html#configuring-setup-using-setup-cfg-files
# https://github.com/4383/sampleproject/blob/update/distribute/setup.cfg
[metadata]
name = erichek
description = "Validation packages for Eric's rooms"
long_description = file: Readme.rst
# Versions should compatibly with PEP440. For a discussion on single-sourcing
# the version across setup.py and the project code, see
# https://packaging.python.org/en/latest/single_source_version.html
version = 0.0.0
# Author details
author = Sasha Chernykh
author_email = SashaChernykhEmpressOfUniverse@kristinita.ru
# The project's main homepage.
url = https://github.com/Kristinita/Erichek
# Choose your license
license = MIT
# What does your project relate to?
keywords = gingerinas erichek erics_rooms validation
# See https://pypi.python.org/pypi?%3Aaction=list_classifiers
# How mature is this project? Common values are
#   3 - Alpha
#   4 - Beta
#   5 - Production/Stable
# Indicate who your project is intended for
# Pick your license as you wish (should match "license" above)
# Specify the Python versions you support here. In particular, ensure
# that you indicate whether you support Python 2, Python 3 or both.
classifiers =
    Development Status :: 4 - Beta
    Environment :: Console
    Intended Audience :: Education
    License :: OSI Approved :: MIT License
    Natural Language :: Russian
    Programming Language :: Python :: 3 :: Only
    Programming Language :: Python :: 3.6
    Topic :: Scientific/Engineering :: Information Analysis

[options]
# Unpack your project to .egg or no?
zip_safe = False
# You can just specify the packages manually here if your project is
# simple. Or you can use find.
packages = find:
# Alternatively, if you want to distribute just a my_module.py, uncomment
# this:
#   py_modules=["my_module"],

# [MIGRATE]
# Same as requirements.txt
# List run-time dependencies here.  These will be installed by pip when
# your project is installed. For an analysis of "install_requires" vs pip's
# requirements files see:
# https://packaging.python.org/en/latest/requirements.html
# install_requires =
#   chardet
#   clize
#   colorama
#   logbook
#   pyfancy
#   pyfiglet
#   regex
#   termcolor

[options.extras_require]
# List additional groups of dependencies here (e.g. development
# dependencies). You can install these using the following syntax,
# for example:
# $ pip install -e .[dev,test]
# dev =
#    check-manifest
# test =
#    coverage

[options.entry_points]
# To provide executable scripts, use entry points in preference to the
# "scripts" keyword. Entry points provide cross-platform support and allow
# pip to create the appropriate form of executable for the target platform.
console_scripts =
   erichek = erichek.__main__:main

# [options.package_data]
# sample = package_data.dat

# [options.packages.find]
# Exclude specific packages
# exclude =
#    contrib
#    docs
#    tests

[bdist_wheel]
# This flag says that the code is written to work on both Python 2 and Python
# 3. If at all possible, it is good practice to do this. If you cannot, you
# will need to generate wheels for each Python version that you support.
# Wheel only for Python 3
# https://wheel.readthedocs.io/en/stable/#defining-the-python-version
python-tag = py3
